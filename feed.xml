<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://alvinzhengq.github.io/CSA-Data-Structures/</id><title>Alvin Zheng</title><subtitle>Alvin's Data Structures 2 individual code and notes.</subtitle> <updated>2022-04-03T23:02:14+00:00</updated> <author> <name>Alvin Zheng</name> <uri>https://alvinzhengq.github.io/CSA-Data-Structures/</uri> </author><link rel="self" type="application/atom+xml" href="https://alvinzhengq.github.io/CSA-Data-Structures/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://alvinzhengq.github.io/CSA-Data-Structures/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Alvin Zheng </rights> <icon>/CSA-Data-Structures/assets/img/favicons/favicon.ico</icon> <logo>/CSA-Data-Structures/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Tech Talk 3 Notes &amp; Code</title><link href="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt3/" rel="alternate" type="text/html" title="Tech Talk 3 Notes &amp; Code" /><published>2022-03-28T00:00:00+00:00</published> <updated>2022-03-28T00:00:00+00:00</updated> <id>https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt3/</id> <content src="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt3/" /> <author> <name>Alvin Zheng</name> </author> <summary> Bubble Sort Bubble sort moves through a list of elements, checking whether an element is larger than the next, if so swap the two. This will cause large elements to bubble to the back, and small elements slowly move to the front. Eventually, after this process is done enough time the list will be sorted. Statistics: Average Bubble Sort Time: 173.4375ms Average Bubble Sort Comparisons: 1.2497... </summary> </entry> <entry><title>PBL Presentation Feedback Notes</title><link href="https://alvinzhengq.github.io/CSA-Data-Structures/posts/pbl/" rel="alternate" type="text/html" title="PBL Presentation Feedback Notes" /><published>2022-03-25T00:00:00+00:00</published> <updated>2022-03-25T00:00:00+00:00</updated> <id>https://alvinzhengq.github.io/CSA-Data-Structures/posts/pbl/</id> <content src="https://alvinzhengq.github.io/CSA-Data-Structures/posts/pbl/" /> <author> <name>Alvin Zheng</name> </author> <summary> Notable Feedback Frontend needs more work, navigation and page organization/worflow. Need some kind of frontend tool to display data, what tool/library? Project can be expanded beyond just the scopes of neuroscience. Plan of Action Frontend planning needed, Figma will be our choice of wireframing. Figma wireframe mockup for Navbar Figma wireframe mockup for Homepa... </summary> </entry> <entry><title>Tech Talk 2 Notes &amp; Code</title><link href="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt2/" rel="alternate" type="text/html" title="Tech Talk 2 Notes &amp; Code" /><published>2022-03-24T00:00:00+00:00</published> <updated>2022-03-29T04:45:30+00:00</updated> <id>https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt2/</id> <content src="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt2/" /> <author> <name>Alvin Zheng</name> </author> <summary> Reverse Polish Notation In mathematics, an expression or mathematical expression is a finite combination of symbols that is well-formed according to rules that depend on the context. In computers, expression can be hard to calculate with precedence rules. In computer math we often convert strings into Reverse Polish Notation (RPN, 3 + 4 becomes 3 4 +) using the Shunting-yard algorithm. ... </summary> </entry> <entry><title>Tech Talk 1 Notes &amp; Code</title><link href="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt1/" rel="alternate" type="text/html" title="Tech Talk 1 Notes &amp; Code" /><published>2022-03-18T00:00:00+00:00</published> <updated>2022-03-28T07:31:10+00:00</updated> <id>https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt1/</id> <content src="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt1/" /> <author> <name>Alvin Zheng</name> </author> <summary> Linked Lists Linked Lists is just a list of nodes connected to each other with pointers. Each node has a head and tail which points to the previous and next node. Linked Lists can be used to create Queues and Stacks. Replit Runtime + Github Repo: Code Page Challenge 1 - Add/Delete from Queue public void add(T data) { LinkedList&amp;lt;T&amp;gt; tail = new LinkedList&amp;lt;&amp;gt;(data, null)... </summary> </entry> <entry><title>Tech Talk 0 Notes &amp; Code</title><link href="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt0/" rel="alternate" type="text/html" title="Tech Talk 0 Notes &amp; Code" /><published>2022-03-10T00:00:00+00:00</published> <updated>2022-03-28T07:31:10+00:00</updated> <id>https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt0/</id> <content src="https://alvinzhengq.github.io/CSA-Data-Structures/posts/tt0/" /> <author> <name>Alvin Zheng</name> </author> <summary> Intro A data structure is a method of organizing data. Think of algorithms as dynamic underlying pieces that interact with data structures. Together, data structures and algorithms combine and allow programmers to build whatever computer programs they’d like. Programming Paradigms Imperative Paradigm A programming paradigm that uses statements that change a program’s stat... </summary> </entry> </feed>
